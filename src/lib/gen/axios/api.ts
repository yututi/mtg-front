/* tslint:disable */
/* eslint-disable */
/**
 * MTG API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Card
 */
export interface Card {
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    'manaCost'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    'rarity'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    'setCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    'otherFaceUuid'?: string | null;
}
/**
 * 
 * @export
 * @interface CardDetail
 */
export interface CardDetail {
    /**
     * 
     * @type {string}
     * @memberof CardDetail
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof CardDetail
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CardDetail
     */
    'manaCost'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CardDetail
     */
    'manaValue'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CardDetail
     */
    'text'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CardDetail
     */
    'flavorText'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CardDetail
     */
    'types'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CardDetail
     */
    'superTypes'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CardDetail
     */
    'subTypes'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof CardDetail
     */
    'rarity'?: string;
    /**
     * 
     * @type {string}
     * @memberof CardDetail
     */
    'power'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CardDetail
     */
    'toughness'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CardDetail
     */
    'loyalty'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CardDetail
     */
    'setCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof CardDetail
     */
    'otherFaceUuid'?: string | null;
}
/**
 * 
 * @export
 * @interface CardPagination
 */
export interface CardPagination {
    /**
     * 
     * @type {number}
     * @memberof CardPagination
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof CardPagination
     */
    'pageSize': number;
    /**
     * 
     * @type {number}
     * @memberof CardPagination
     */
    'count': number;
    /**
     * 
     * @type {Array<Card>}
     * @memberof CardPagination
     */
    'list': Array<Card>;
}

/**
 * CardApi - axios parameter creator
 * @export
 */
export const CardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * カードの一覧を取得する
         * @param {number} page 
         * @param {string} [name] 
         * @param {Array<'B' | 'W' | 'U' | 'G' | 'R' | 'NONE'>} [color] 
         * @param {string} [cost] 
         * @param {Array<string>} [types] 
         * @param {Array<string>} [rarity] 
         * @param {Array<string>} [setCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (page: number, name?: string, color?: Array<'B' | 'W' | 'U' | 'G' | 'R' | 'NONE'>, cost?: string, types?: Array<string>, rarity?: Array<string>, setCode?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getList', 'page', page)
            const localVarPath = `/api/card/page/{page}`
                .replace(`{${"page"}}`, encodeURIComponent(String(page)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (color) {
                localVarQueryParameter['color'] = color;
            }

            if (cost !== undefined) {
                localVarQueryParameter['cost'] = cost;
            }

            if (types) {
                localVarQueryParameter['types'] = types;
            }

            if (rarity) {
                localVarQueryParameter['rarity'] = rarity;
            }

            if (setCode) {
                localVarQueryParameter['setCode'] = setCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * カードの詳細を取得する
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOne: async (uuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('getOne', 'uuid', uuid)
            const localVarPath = `/api/card/detail/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CardApi - functional programming interface
 * @export
 */
export const CardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CardApiAxiosParamCreator(configuration)
    return {
        /**
         * カードの一覧を取得する
         * @param {number} page 
         * @param {string} [name] 
         * @param {Array<'B' | 'W' | 'U' | 'G' | 'R' | 'NONE'>} [color] 
         * @param {string} [cost] 
         * @param {Array<string>} [types] 
         * @param {Array<string>} [rarity] 
         * @param {Array<string>} [setCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(page: number, name?: string, color?: Array<'B' | 'W' | 'U' | 'G' | 'R' | 'NONE'>, cost?: string, types?: Array<string>, rarity?: Array<string>, setCode?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardPagination>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(page, name, color, cost, types, rarity, setCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * カードの詳細を取得する
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOne(uuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOne(uuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CardApi - factory interface
 * @export
 */
export const CardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CardApiFp(configuration)
    return {
        /**
         * カードの一覧を取得する
         * @param {number} page 
         * @param {string} [name] 
         * @param {Array<'B' | 'W' | 'U' | 'G' | 'R' | 'NONE'>} [color] 
         * @param {string} [cost] 
         * @param {Array<string>} [types] 
         * @param {Array<string>} [rarity] 
         * @param {Array<string>} [setCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(page: number, name?: string, color?: Array<'B' | 'W' | 'U' | 'G' | 'R' | 'NONE'>, cost?: string, types?: Array<string>, rarity?: Array<string>, setCode?: Array<string>, options?: any): AxiosPromise<CardPagination> {
            return localVarFp.getList(page, name, color, cost, types, rarity, setCode, options).then((request) => request(axios, basePath));
        },
        /**
         * カードの詳細を取得する
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOne(uuid: string, options?: any): AxiosPromise<CardDetail> {
            return localVarFp.getOne(uuid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CardApi - object-oriented interface
 * @export
 * @class CardApi
 * @extends {BaseAPI}
 */
export class CardApi extends BaseAPI {
    /**
     * カードの一覧を取得する
     * @param {number} page 
     * @param {string} [name] 
     * @param {Array<'B' | 'W' | 'U' | 'G' | 'R' | 'NONE'>} [color] 
     * @param {string} [cost] 
     * @param {Array<string>} [types] 
     * @param {Array<string>} [rarity] 
     * @param {Array<string>} [setCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApi
     */
    public getList(page: number, name?: string, color?: Array<'B' | 'W' | 'U' | 'G' | 'R' | 'NONE'>, cost?: string, types?: Array<string>, rarity?: Array<string>, setCode?: Array<string>, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).getList(page, name, color, cost, types, rarity, setCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * カードの詳細を取得する
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApi
     */
    public getOne(uuid: string, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).getOne(uuid, options).then((request) => request(this.axios, this.basePath));
    }
}


